import React, { useEffect, useRef } from 'react';
import { createChart } from 'lightweight-charts';

const LineChart = () => {
    const chartContainerRef = useRef(null);

    useEffect(() => {
        const chart = createChart(chartContainerRef.current, {
            width: chartContainerRef.current.clientWidth,
            height: 400,
            layout: {
                backgroundColor: '#ffffff',
                textColor: '#333',
            },
            grid: {
                vertLines: {
                    color: '#e1e1e1',
                },
                horzLines: {
                    color: '#e1e1e1',
                },
            },
            rightPriceScale: {
                borderColor: '#ccc',
            },
            timeScale: {
                borderColor: '#ccc',
            },
        });

        const data1 = [
            { time: '2023-01-01', value: 10 },
            { time: '2023-01-02', value: 15 },
            { time: '2023-01-03', value: 20 },
            { time: '2023-01-04', value: 18 },
            { time: '2023-01-05', value: 22 },
        ];

        const data2 = [
            { time: '2023-01-01', value: 5 },
            { time: '2023-01-02', value: 10 },
            { time: '2023-01-03', value: 15 },
            { time: '2023-01-04', value: 12 },
            { time: '2023-01-05', value: 18 },
        ];

        const lineSeries1 = chart.addLineSeries({
            color: 'blue',
            lineWidth: 2,
        });
        lineSeries1.setData(data1);

        const lineSeries2 = chart.addLineSeries({
            color: 'red',
            lineWidth: 2,
        });
        lineSeries2.setData(data2);

        const areaSeries = chart.addAreaSeries({
            topLineColor: 'rgba(255, 0, 0, 0.5)',
            bottomLineColor: 'rgba(0, 0, 255, 0.5)',
            lineWidth: 0,
            topFillColor1: 'rgba(255, 0, 0, 0.3)',
            topFillColor2: 'rgba(255, 0, 0, 0.1)',
            bottomFillColor1: 'rgba(0, 0, 255, 0.3)',
            bottomFillColor2: 'rgba(0, 0, 255, 0.1)',
        });

        const areaData = data1.map((point, index) => ({
            time: point.time,
            value: Math.max(point.value, data2[index].value),
            bottomValue: Math.min(point.value, data2[index].value),
        }));

        areaSeries.setData(areaData);

        return () => {
            chart.remove();
        };
    }, []);

    return <div ref={chartContainerRef} style={{ position: 'relative', width: '100%', height: '400px' }} />;
};

export default LineChart;